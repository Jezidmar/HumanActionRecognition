% now, I make use of X_T and X_S
%Labels=extract_labels();
%X_S <- spatial feature set.
%Splits=cell(1, 30);
%for i=1:30
%    Splits{i}=splitMSRC12Dataset(df,i);
%end
binary_split=Splits{2};
trainIdx = (binary_split == 0);  % Logical index array for training data
testIdx = (binary_split == 1);   % Logical index array for testing data
%testIdx = max(0,trainIdx-1);
X_train = X_S(trainIdx, :);
Y_train = Labels(trainIdx, :);

X_test = X_S(testIdx, :);
Y_test = Labels(testIdx, :);
% Define the proportion for the training set
%trainRatio = 0.95;  % 37% for training, 63% for testing
%rng(2);
%c = cvpartition(Labels, 'HoldOut', 1 - trainRatio);
%trainIdx = training(c);  % Logical array, true for training set
%testIdx = test(c);       % Logical array, true for test set
% Split the data
%X_train = X_S(trainIdx, :);
%X_train = zscore(X_train);
%X_train_T = X_T(trainIdx, :);
%Y_train = Labels(trainIdx, :);

%X_test = X_S(testIdx, :);
%X_test = zscore(X_test);
%X_test_T = X_T(testIdx, :);
%Y_test = Labels(testIdx, :);




%
ModelRF = TreeBagger(1000,X_train, Y_train,'OOBPred','On');
pred = predict(ModelRF,X_test);
confusionchart(Y_test, str2double(pred));
confM = confusionmat(Y_test, str2double(pred) );
num_classes = 12;
total_incorrect=0;
total_correct=0;
for i = 1:num_classes
    total_incorrect=total_incorrect+sum(confM(i,:))-confM(i,i);
    total_correct=total_correct+confM(i,i);
end

Acc_rf=total_correct/(total_incorrect+total_correct)